from scipy.optimize import minimize
import numpy as np

# Declare constants
N = 1, Q = 1, R = 1
A = 0.5, B = 1

def cost_function(u, x_t):
    # Prediction for next state
    x_next = A*x_t + B*u

    # Cost for this prediction
    cost = Q*x_next**2 + R*u**2
    return cost

# Define initial guess
x_t = 0.5
initial_guess = np.array([0.0])


def U_star(x_t):
    minimize(sum(cost_function, initial_guess, args=(x_t)), method='BFGS')

print(U_star(x_t).x[0])